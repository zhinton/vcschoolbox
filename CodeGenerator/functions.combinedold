// Combined functions file generated by tools/combine_js.py
// Files:
// - CodeGenerator\scripts\actionChecker.js
// - CodeGenerator\scripts\forcedConfidential.js
// - CodeGenerator\scripts\hoverEffect.js
// - CodeGenerator\scripts\loader.js
// - CodeGenerator\scripts\modal.js
// - CodeGenerator\scripts\parentNews copy.js
// - CodeGenerator\scripts\parentNews.js
// - CodeGenerator\scripts\submitNotification.js
// - CodeGenerator\scripts\subtypeAlert.js
// - CodeGenerator\scripts\subtypeSeverity.js


// ---- START CodeGenerator\scripts\actionChecker.js ----
document.querySelector('.submit').addEventListener('mouseover', (event) => {
    const pastoralDropdown = document.getElementById('pastoral-actions');
    if (!pastoralDropdown) {
        return;
    }

    const selectizeInput = document.querySelector('.selectize-input.items.not-full');
    if (!selectizeInput) {
        console.error('Selectize input not found.');
        return;
    }

    const items = Array.from(selectizeInput.querySelectorAll('div.item'));
    const hasItems = items.length > 0;

    console.log('Selected items:', items.map(item => item.textContent.trim()));

    let missingTagsMessages = [];

    for (let i = 0; i < pastoralDropdown.options.length; i++) {
        const option = pastoralDropdown.options[i];
        if (option.selected) {
            const selectedActionIndex = actions.findIndex(action => option.textContent.includes(action));
            if (selectedActionIndex !== -1) {
                console.log('Selected action:', actions[selectedActionIndex]);

                const requiredTags = tagLists[selectedActionIndex];
                const hasRequiredTags = items.some(item => {
                    const itemText = item.textContent.replace('Ã—', '').trim();
                    console.log('Checking item:', itemText);
                    return requiredTags.includes(itemText);
                });

                console.log('Required tags:', requiredTags);
                console.log('Has required tags:', hasRequiredTags);

                if (!hasRequiredTags) {
                    missingTagsMessages.push(`<li>${messages[selectedActionIndex]} Options: ${requiredTags.join(', ')}</li>`);
                }
            }
        }
    }

    if (missingTagsMessages.length > 0) {
        event.preventDefault(); // Prevent form submission
        showModal(`<ul>${missingTagsMessages.join('')}</ul>`, [{
            text: 'OK',
            color: window.acceptColor,
            callback: () => {
                const inputElement = selectizeInput.querySelector('input');
                if (inputElement) {
                    inputElement.focus();
                }
            }
        }]);
    }
});

// ---- END CodeGenerator\scripts\actionChecker.js ----

// ---- START CodeGenerator\scripts\forcedConfidential.js ----
function updatePageForConfidentialType() {
    const typeIdField = document.getElementById('typeId');
    const generalTabLink = document.querySelector('a[data-tab][href="#panel-general"]');
    const confidentialTabLink = document.querySelector('a[data-tab][href="#panel-confidential"]');

    if (!typeIdField || !generalTabLink || !confidentialTabLink) {
        console.error('Required elements not found.');
        return;
    }

    const selectedOption = typeIdField.options[typeIdField.selectedIndex];
    const selectedType = selectedOption ? selectedOption.text : '';
    console.log('Selected type:', selectedType);

    // Use the generated variable here:
    if (selectedType.startsWith(forcedConfidential_type)) {
        console.log('Confidential type detected.');

        // Hide the General tab link
        generalTabLink.style.display = 'none';

        // Select the Confidential tab
        confidentialTabLink.setAttribute('aria-selected', 'true');
        confidentialTabLink.setAttribute('tabindex', '0');
        confidentialTabLink.click(); // Simulate a click to activate the tab
    } else {
        console.log('Non-confidential type detected.');

        // Show the General tab link
        generalTabLink.style.display = '';

        // Deselect the Confidential tab
        confidentialTabLink.removeAttribute('aria-selected');
        confidentialTabLink.setAttribute('tabindex', '-1');
    }
}

// Add event listener to typeId field to trigger update on change
document.getElementById('typeId').addEventListener('change', updatePageForConfidentialType);

// Initial call to set the page based on the initial typeId selection
updatePageForConfidentialType();

// ---- END CodeGenerator\scripts\forcedConfidential.js ----

// ---- START CodeGenerator\scripts\hoverEffect.js ----
const dropdownMenu = document.getElementById('severityId');
const hoverImage = document.createElement('img');
hoverImage.id = 'hoverImage';
hoverImage.src = `https://${schoolboxDomain}/send.php?id=${hoverEffect_imageID}&height=${hoverEffect_imageHeight}&width=${hoverEffect_imageWidth}`;
hoverImage.alt = 'Hover Image';
hoverImage.style.display = 'none';
hoverImage.style.position = 'absolute';
hoverImage.style.height = '35REM';
hoverImage.style.zIndex = '1000';
document.body.appendChild(hoverImage);

dropdownMenu.addEventListener('mouseover', () => {
    const rect = dropdownMenu.getBoundingClientRect();
    hoverImage.style.top = `${rect.top + window.scrollY}px`;
    hoverImage.style.left = `${rect.right + window.scrollX}px`;
    hoverImage.style.transform = 'translateY(-50%)';
    hoverImage.style.display = 'block';
});

dropdownMenu.addEventListener('mouseout', () => {
    hoverImage.style.display = 'none';
});

// ---- END CodeGenerator\scripts\hoverEffect.js ----

// ---- START CodeGenerator\scripts\loader.js ----
// Function to load a script from a URL if not already loaded
const loadScript = (url) => {
    if (!url) {
        console.error('No JavaScriptURL provided. Script not loaded.');
        return;
    }
    if (!document.querySelector(`script[src="${url}"]`)) {
        const script = document.createElement('script');
        script.src = url;
        script.onload = () => console.log(`${url} loaded successfully.`);
        script.onerror = () => console.error(`Failed to load ${url}.`);
        document.head.appendChild(script);
    } else {
        console.log(`Script ${url} already loaded.`);
    }
};

// Function to check if the current URL matches the pattern
function isMatchingURL(url, targetURLPart) {
    return url.includes(targetURLPart);
}

document.addEventListener('DOMContentLoaded', () => {
    console.log('Loader script loaded.');
    if (typeof modules === 'undefined') {
        console.error('Modules object is not defined!');
        return;
    }
    if (typeof JavaScriptURL === 'undefined') {
        console.error('JavaScriptURL is not defined!');
        return;
    }
    console.log('Enabled modules:', Object.keys(modules).filter(m => modules[m]));
    console.log('JavaScriptURL:', JavaScriptURL);

    // Pastoral Care Module
    if (modules.PastoralCare) {
        const pcURLPart = '/pastoral/student/';
        const endingPart = '/record/insert';
        if (isMatchingURL(window.location.href, pcURLPart) && window.location.href.endsWith(endingPart)) {
            console.log('PastoralCare module active and URL matched. Loading script...');
            loadScript(`${JavaScriptURL}functions.js`);
        } else {
            console.log('PastoralCare module enabled, but URL did not match.');
        }
    }
    // Emailing Module
    if (modules.Emailing) {
        const emailURLPart = '/mail/create';
        if (isMatchingURL(window.location.href, emailURLPart)) {
            console.log('Emailing module active and URL matched. Loading script...');
            loadScript(`${JavaScriptURL}functions.js`);
        } else {
            console.log('Emailing module enabled, but URL did not match.');
        }
    }
    // News Module
    if (modules.News) {
        const newsURLPart = '/news/';
        if (isMatchingURL(window.location.href, newsURLPart)) {
            console.log('News module active and URL matched. Loading script...');
            loadScript(`${JavaScriptURL}functions.js`);
        } else {
            console.log('News module enabled, but URL did not match.');
        }
    }
});
// ---- END CodeGenerator\scripts\loader.js ----

// ---- START CodeGenerator\scripts\modal.js ----
// Get tab bar color from computed styles
const tabBarElement = document.querySelector('.tab-bar');
const tabBarColor = tabBarElement ? getComputedStyle(tabBarElement).backgroundColor : null;

// If acceptColor or rejectColor is blank or falsy, use tabBarColor
window.acceptColor = acceptColor && acceptColor.trim() ? acceptColor : tabBarColor;
window.rejectColor = rejectColor && rejectColor.trim() ? rejectColor : tabBarColor;

// This is the notification popup code used by other scripts
// Function to create and show a modal dialog with customizable buttons
function showModal(message, buttons) {
    var modal = document.createElement('div');
    modal.id = 'myModal';
    modal.style.display = 'block';
    modal.style.position = 'fixed';
    modal.style.zIndex = '1000';
    modal.style.left = '0';
    modal.style.top = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    modal.style.overflow = 'auto';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.4)';

    var modalContent = document.createElement('div');
    modalContent.style.backgroundColor = '#fefefe';
    modalContent.style.margin = '15% auto';
    modalContent.style.padding = '20px';
    modalContent.style.border = '1px solid #888';
    modalContent.style.width = '80%';
    modalContent.style.maxWidth = '300px';
    modalContent.style.textAlign = 'center';
    modalContent.style.boxSizing = 'border-box';

    var modalText = document.createElement('p');
    modalText.innerHTML = message;

    var modalButtons = document.createElement('div');
    modalButtons.style.display = 'flex';
    modalButtons.style.justifyContent = 'space-around';
    modalButtons.style.marginTop = '20px';

    buttons.forEach(button => {
        var btn = document.createElement('button');
        btn.textContent = button.text;
        btn.style.backgroundColor = button.color;
        btn.style.color = 'white'; // Force white text
        btn.style.padding = '10px 20px';
        btn.style.border = 'none';
        btn.style.cursor = 'pointer';
        btn.addEventListener('click', () => {
            closeModal();
            if (button.callback) button.callback();
        });
        modalButtons.appendChild(btn);
    });

    modalContent.appendChild(modalText);
    modalContent.appendChild(modalButtons);
    modal.appendChild(modalContent);
    document.body.appendChild(modal);

    // Add media query for smaller screens
    var style = document.createElement('style');
    style.innerHTML = `
        @media (max-width: 600px) {
            #myModal div {
                width: 90%;
                margin: 30% auto;
            }
        }
    `;
    document.head.appendChild(style);
}

function closeModal() {
    var modal = document.getElementById('myModal');
    if (modal) {
        modal.style.display = 'none';
        document.body.removeChild(modal);
    }
}

window.acceptColor = acceptColor;
window.rejectColor = rejectColor;
// ---- END CodeGenerator\scripts\modal.js ----

// ---- START CodeGenerator\scripts\parentNews copy.js ----
// Define the campuses array
const campuses = ['Primary', 'Secondary'];

// Define the message parts
const message1 = "Please note this will include parents in"; // Message before the count or name of campuses
const message2 = "Did you want to change your audience?"; // Message after the count or name of campuses

// Variable to store already prompted campuses
let promptedCampuses = new Set();

// No changes to be made below here unless you know what you need.
//------------------------------------------------------------
// Function to check list items and store selected campuses in an array
function checkListItems() {
    // Get all list items
    var listItems = document.querySelectorAll('li');

    // Array to store selected campuses
    var selectedCampuses = [];

    // Iterate through each list item
    listItems.forEach(function(item) {
        // Get the title from the <h4> element
        var titleElement = item.querySelector('h4');
        var title = titleElement ? titleElement.getAttribute('title') : '';

        // Get the campus from the <p> element with class 'meta'
        var campusElements = item.querySelectorAll('p.meta');
        var campus = '';
        campusElements.forEach(function(campusElement) {
            if (campusElement.textContent.trim() === 'Campus') {
                campus = 'Campus';
            }
        });

        // Check if the title is in the campuses array and not already prompted
        if (campus && campuses.includes(title) && !promptedCampuses.has(title)) {
            selectedCampuses.push({ title, item });
        }
    });

    // Display modal if any new campuses are selected
    if (selectedCampuses.length > 0) {
        let message;
        if (selectedCampuses.length === 1) {
            message = `${message1} the ${selectedCampuses[0].title} campus. ${message2}`;
        } else {
            const campusNames = selectedCampuses.map(campus => campus.title).join(', ');
            message = `${message1} ${selectedCampuses.length} campuses (${campusNames}). ${message2}`;
        }
        showModal(message, [
            {
                text: "Yes",
                color: "green",
                callback: function() {
                    console.log(`User chose to change the audience for ${selectedCampuses.length} campuses`);
                    selectedCampuses.forEach(function(campus) {
                        // Simulate a click on the remove button
                        var removeButton = campus.item.querySelector('nav a.icon-close');
                        if (removeButton) {
                            removeButton.click();
                        }
                    });
                }
            },
            {
                text: "No",
                color: "red",
                callback: function() {
                    console.log(`User chose not to change the audience for ${selectedCampuses.length} campuses`);
                    // Add the campuses to the prompted set
                    selectedCampuses.forEach(function(campus) {
                        promptedCampuses.add(campus.title);
                    });
                }
            }
        ]);
    }
}

// Add event listener to the "Publish news" button for hover
document.getElementById('news-submit').addEventListener('mouseenter', function() {
    checkListItems(); // Call the function to check list items on hover
});

// ---- END CodeGenerator\scripts\parentNews copy.js ----

// ---- START CodeGenerator\scripts\parentNews.js ----
function checkListItems() {
    // Get all list items
    var listItems = document.querySelectorAll('li');

    // Array to store selected campuses
    var selectedCampuses = [];

    // Iterate through each list item
    listItems.forEach(function(item) {
        // Get the title from the <h4> element
        var titleElement = item.querySelector('h4');
        var title = titleElement ? titleElement.getAttribute('title') : '';

        // Get the campus from the <p> element with class 'meta'
        var campusElements = item.querySelectorAll('p.meta');
        var campus = '';
        campusElements.forEach(function(campusElement) {
            if (campusElement.textContent.trim() === 'Campus') {
                campus = 'Campus';
            }
        });

        // Check if the title is in the campuses array and not already prompted
        if (campus && campuses.includes(title) && !promptedCampuses.has(title)) {
            selectedCampuses.push({ title, item });
        }
    });

    // Display modal if any new campuses are selected
    if (selectedCampuses.length > 0) {
        let message;
        if (selectedCampuses.length === 1) {
            message = `${message1} the ${selectedCampuses[0].title} campus. ${message2}`;
        } else {
            const campusNames = selectedCampuses.map(campus => campus.title).join(', ');
            message = `${message1} ${selectedCampuses.length} campuses (${campusNames}). ${message2}`;
        }
        showModal(message, [
            {
                text: "Yes",
                color: "green",
                callback: function() {
                    console.log(`User chose to change the audience for ${selectedCampuses.length} campuses`);
                    selectedCampuses.forEach(function(campus) {
                        // Simulate a click on the remove button
                        var removeButton = campus.item.querySelector('nav a.icon-close');
                        if (removeButton) {
                            removeButton.click();
                        }
                    });
                }
            },
            {
                text: "No",
                color: "red",
                callback: function() {
                    console.log(`User chose not to change the audience for ${selectedCampuses.length} campuses`);
                    // Add the campuses to the prompted set
                    selectedCampuses.forEach(function(campus) {
                        promptedCampuses.add(campus.title);
                    });
                }
            }
        ]);
    }
}

// Add event listener to the "Publish news" button for hover
document.getElementById('news-submit').addEventListener('mouseenter', function() {
    checkListItems(); // Call the function to check list items on hover
});

// ---- END CodeGenerator\scripts\parentNews.js ----

// ---- START CodeGenerator\scripts\submitNotification.js ----
// submitNotification.js
document.querySelector('.submit').addEventListener('click', (event) => {
    const dropdown = document.getElementById('subtypeId');
    if (!dropdown) {
        return;
    }

    const selectedOption = dropdown.options[dropdown.selectedIndex];
    if (!selectedOption) {
        return;
    }

    if (selectedOption.textContent.includes("Not Selected")) { // Check the text content
        event.preventDefault(); // Prevent form submission
        showModal("Please select a sub-type", [{
            text: 'OK',
            color: window.acceptColor,
            callback: () => {
                dropdown.focus();
            }
        }]);
    } else {
        console.log('Condition not met: No action taken');
    }
});

// ---- END CodeGenerator\scripts\submitNotification.js ----

// ---- START CodeGenerator\scripts\subtypeAlert.js ----
const subtypeDropdown = document.getElementById("subtypeId");
subtypeDropdown.addEventListener("change", function() {
    var selectedText = subtypeDropdown.options[subtypeDropdown.selectedIndex].text;
    if (selectedText.toUpperCase().includes(subtypeCheck)) {
        showModal(modalMessage, [
            { text: 'Yes', color: window.acceptColor, },
            { text: 'No', color: window.rejectColor, callback: unselectDropdown }
        ]);
    }
});

function unselectDropdown() {
    var dropdown = document.getElementById('subtypeId');
    dropdown.selectedIndex = 0;
}

// ---- END CodeGenerator\scripts\subtypeAlert.js ----

// ---- START CodeGenerator\scripts\subtypeSeverity.js ----
function autoSelectSeverity() {
    const subtypeDropdown = document.getElementById('subtypeId');
    const severityDropdown = document.getElementById('severityId');

    if (!subtypeDropdown || !severityDropdown) {
        console.error('Subtype or severity dropdown not found.');
        return;
    }

    const selectedOption = subtypeDropdown.options[subtypeDropdown.selectedIndex];
    if (!selectedOption) {
        console.log('No subtype selected.');
        return;
    }

    const selectedSubtype = selectedOption.text;
    console.log('Selected subtype:', selectedSubtype);

    for (let i = 0; i < subtypeSeverity.length; i++) {
        const [subtype, severity] = subtypeSeverity[i];
        if (selectedSubtype.startsWith(subtype)) {
            console.log(`Matching subtype found: ${subtype}, setting severity to: ${severity}`);
            for (let j = 0; j < severityDropdown.options.length; j++) {
                if (severityDropdown.options[j].text.includes(severity)) {
                    severityDropdown.selectedIndex = j;
                    console.log(`Selected severity: ${severity}`);
                    break;
                }
            }
            break;
        }
    }
}

// Add event listener to subtype dropdown to trigger auto-select on change
document.getElementById('subtypeId').addEventListener('change', autoSelectSeverity);

// Initial call to set severity based on the initial subtype selection
autoSelectSeverity();

// ---- END CodeGenerator\scripts\subtypeSeverity.js ----
